package djjy.spkc;

import android.hardware.Sensor;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.StrictMode;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ListView;

import androidx.appcompat.app.AppCompatActivity;

import com.example.hsdj.R;
import com.google.gson.Gson;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import fm.jiecao.jcvideoplayer_lib.JCVideoPlayer;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class VideoActivity extends AppCompatActivity {
    private ImageButton btn_return;
    private ListView list_view;

    private List<HashMap<String, Object>> list_show = new ArrayList<HashMap<String,Object>>();
    private VideoListAdapter adapterVideoList;
    private SensorManager sensorManager;
    private SensorEventListener sensorEventListener;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_video);

        btn_return=findViewById(R.id.btn_return);
        btn_return.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });

        /*获取视频课程列表*/
        try{
            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
            StrictMode.setThreadPolicy(policy);
            //创建OkHttpClient实例，主要用于请求网络
            OkHttpClient okHttpClient = new OkHttpClient();
            //创建表单请求体
            FormBody.Builder formBody = new FormBody.Builder();
            //传递键值对参数
            formBody.add("file_type","mp4");
            //创建Request实例，设置POST参数
            Request okRequest = new Request.Builder().url("http://58.51.240.150:8000/app/hsdj/xxjymgr/views/getVideos").post(formBody.build()).build();
            Response response = okHttpClient.newCall(okRequest).execute();
            initData(response.body().string());
        }catch(Exception e){
            e.printStackTrace();
        }
        initView();
    }

    private void initData(String result){
        System.out.println(result);
        Gson gson = new Gson();
        Video b = gson.fromJson(result,Video.class);
        for (int i = 0; i < b.getData().getRows().size(); i++) {
            HashMap<String, Object> item = new HashMap<String, Object>();
            item.put("remark",b.getData().getRows().get(i).getRemark());
            item.put("file_path","http://58.51.240.150:8000/media/"+b.getData().getRows().get(i).getFile_path()+
                    "/"+b.getData().getRows().get(i).getFile_name()+"."+b.getData().getRows().get(i).getFile_type());
            list_show.add(item);
        }
    }

    private void initView(){
        list_view = findViewById(R.id.list_view);
        adapterVideoList = new VideoListAdapter(this, list_show);
        list_view.setAdapter(adapterVideoList);
        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        sensorEventListener = new JCVideoPlayer.JCAutoFullscreenListener();
    }

    @Override
    public void onBackPressed() {
        if (JCVideoPlayer.backPress()) {
            return;
        }
        super.onBackPressed();
    }

    @Override
    protected void onResume() {
        super.onResume();
        Sensor accelerometerSensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        sensorManager.registerListener(sensorEventListener, accelerometerSensor, SensorManager.SENSOR_DELAY_NORMAL);
    }

    @Override
    protected void onPause() {
        super.onPause();
        sensorManager.unregisterListener(sensorEventListener);
        JCVideoPlayer.releaseAllVideos();
    }
}